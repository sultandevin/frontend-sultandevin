/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    ideas: Idea;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    ideas: IdeasSelect<false> | IdeasSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  slug: string;
  hero: Hero[];
  layout: (Header | Accordion | CallToAction | ContentWithMedia | Features | Testimonials)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero".
 */
export interface Hero {
  variant: 'high-impact' | 'medium-impact' | 'small-impact';
  heading: string;
  subheading?: string | null;
  backgroundImage: number | Media;
  /**
   * Call to action buttons (only for high and medium impact variants)
   */
  ctaButtons?:
    | {
        label: string;
        link: string;
        variant: 'default' | 'secondary' | 'outline';
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'hero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Header".
 */
export interface Header {
  heading: string;
  subheading: string;
  image?: (number | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'header';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Accordion".
 */
export interface Accordion {
  title?: string | null;
  content?:
    | {
        trigger: string;
        content: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'accordion';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToAction".
 */
export interface CallToAction {
  heading: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  alignment: 'left' | 'center' | 'right';
  buttons: {
    label: string;
    link: string;
    variant: 'default' | 'secondary' | 'outline' | 'ghost';
    size: 'default' | 'sm' | 'lg';
    id?: string | null;
  }[];
  backgroundColor: 'none' | 'light' | 'dark' | 'primary';
  id?: string | null;
  blockName?: string | null;
  blockType: 'call-to-action';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentWithMedia".
 */
export interface ContentWithMedia {
  heading: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  media: number | Media;
  mediaPosition: 'left' | 'right';
  background: 'none' | 'light' | 'dark';
  button: {
    text: string;
    url: string;
    variant: 'default' | 'secondary' | 'outline';
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'content-with-media';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Features".
 */
export interface Features {
  heading: string;
  subheading?: string | null;
  layout: 'grid' | 'list' | 'cards';
  features: {
    title: string;
    description: string;
    icon: 'none' | 'lightbulb' | 'star' | 'heart' | 'shield' | 'rocket' | 'chart' | 'target' | 'settings';
    /**
     * Used in List and Cards layouts
     */
    image?: (number | null) | Media;
    link: {
      text: string;
      url: string;
    };
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'features';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Testimonials".
 */
export interface Testimonials {
  heading: string;
  subheading?: string | null;
  layout: 'grid' | 'carousel' | 'featured';
  testimonials: {
    quote: string;
    author: string;
    title?: string | null;
    avatar?: (number | null) | Media;
    rating: '0' | '1' | '2' | '3' | '4' | '5';
    id?: string | null;
  }[];
  backgroundColor: 'none' | 'light' | 'dark';
  id?: string | null;
  blockName?: string | null;
  blockType: 'testimonials';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ideas".
 */
export interface Idea {
  id: number;
  heading: string;
  subheading: string;
  image: number | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'ideas';
        value: number | Idea;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  hero?:
    | T
    | {
        hero?: T | HeroSelect<T>;
      };
  layout?:
    | T
    | {
        header?: T | HeaderSelect<T>;
        accordion?: T | AccordionSelect<T>;
        'call-to-action'?: T | CallToActionSelect<T>;
        'content-with-media'?: T | ContentWithMediaSelect<T>;
        features?: T | FeaturesSelect<T>;
        testimonials?: T | TestimonialsSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero_select".
 */
export interface HeroSelect<T extends boolean = true> {
  variant?: T;
  heading?: T;
  subheading?: T;
  backgroundImage?: T;
  ctaButtons?:
    | T
    | {
        label?: T;
        link?: T;
        variant?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Accordion_select".
 */
export interface AccordionSelect<T extends boolean = true> {
  title?: T;
  content?:
    | T
    | {
        trigger?: T;
        content?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToAction_select".
 */
export interface CallToActionSelect<T extends boolean = true> {
  heading?: T;
  content?: T;
  alignment?: T;
  buttons?:
    | T
    | {
        label?: T;
        link?: T;
        variant?: T;
        size?: T;
        id?: T;
      };
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentWithMedia_select".
 */
export interface ContentWithMediaSelect<T extends boolean = true> {
  heading?: T;
  content?: T;
  media?: T;
  mediaPosition?: T;
  background?: T;
  button?:
    | T
    | {
        text?: T;
        url?: T;
        variant?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Features_select".
 */
export interface FeaturesSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  layout?: T;
  features?:
    | T
    | {
        title?: T;
        description?: T;
        icon?: T;
        image?: T;
        link?:
          | T
          | {
              text?: T;
              url?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  layout?: T;
  testimonials?:
    | T
    | {
        quote?: T;
        author?: T;
        title?: T;
        avatar?: T;
        rating?: T;
        id?: T;
      };
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ideas_select".
 */
export interface IdeasSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}